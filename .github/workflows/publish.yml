name: Godot Pages

on:
  push:
    branches: [ main ]

env:
  # Endre på disse
  GODOT_VERSION: "4.4"         # Din Godot versjon (se "About Godot")
  PROJECT_FOLDER: "demo_project" # Mappesti fra repository root
  EXPORT_PRESET_NAME: Web        # Navn på Web Export Preset i Project/Export (Standard: Web)

  # Skal ikke trenge å røre disse, eller noe lenger nede. (Med mindre du ønsker å bruke mkdocs, se nederst)
  EXPORT_TEMPLATE: release
  EXPORT_FOLDER: build/
  EXPORT_FILENAME: index.html

concurrency:
  group: "pages"
  cancel-in-progress: true

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  godot_pages:
    runs-on: ubuntu-latest
    name: Godot Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: "Set environmental variables"
      run: |
        echo "GODOT_EXECUTABLE_DOWNLOAD_URL=https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_linux.x86_64.zip" >> $GITHUB_ENV
        echo "GODOT_TEMPLATES_DOWNLOAD_URL=https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v3

    - name: Cache Godot
      id: cache-godot
      uses: actions/cache@v4
      with:
        path: |
          templates
          godot
        key: ${{ runner.os }}-godot

    - name: Install Godot
      if: steps.cache-godot.outputs.cache-hit != 'true'
      run: |
        echo "Downloading Godot ${GODOT_VERSION}..."
        curl ${GODOT_EXECUTABLE_DOWNLOAD_URL} --output godot.zip -L
        curl ${GODOT_TEMPLATES_DOWNLOAD_URL} --output templates.tpz -L
        
        echo "Unzipping Godot ${GODOT_VERSION}..."
        unzip godot.zip -d godot
        unzip templates.tpz
        rm godot.zip templates.tpz

    - name: Link Godot files from cache
      run: |
        mkdir -v -p ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
        
        cp -r templates/* ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable/
        ln -s godot/Godot* ${GITHUB_WORKSPACE}/godot.x86_64

    - name: Build Project
      run: |
        mkdir -v -p ${GITHUB_WORKSPACE}/${EXPORT_FOLDER}
        cd ${PROJECT_FOLDER}
        ${GITHUB_WORKSPACE}/godot.x86_64 --headless --path . --export-${EXPORT_TEMPLATE} ${EXPORT_PRESET_NAME} ${GITHUB_WORKSPACE}/${EXPORT_FOLDER}/${EXPORT_FILENAME}

    # Workaround Cross-origin Isolation (COOR & COEP)
    # NOTE: No longer needed for 4.4(?) and above
    # - name: Add coi-service-worker
    #  run: |
    #    git clone https://github.com/gzuidhof/coi-serviceworker.git
    #    mv coi-serviceworker/coi-serviceworker.js ${EXPORT_FOLDER}/coi-serviceworker.js
    #    sed -i 's#\(		<script src="index.js"></script>\)#		<script src="coi-serviceworker.js"></script>\n\1#g' ${EXPORT_FOLDER}/index.html

    # Uncomment for mkdocs (Use a link to 'demo')
    #- name: Setup Python
    #  uses: actions/setup-python@v2
    #  with:
    #      python-version: '3.10'

    #- name: Create Mkdocs
    #  run: |
    #    pip install -r requirements.txt
    #    mkdocs build -d pages
    #    mkdir pages/demo
    #    mv ${EXPORT_FOLDER}/* pages/demo
    #    echo "EXPORT_FOLDER=pages" >> $GITHUB_ENV

    - name: Upload Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        name: github-pages
        path: ${{ env.EXPORT_FOLDER }}

    - name: Deploy to GitHub Pages 🚀
      id: deployment
      uses: actions/deploy-pages@v4
